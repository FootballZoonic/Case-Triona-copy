//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    logFileItemsAll(): Promise<LogFileItem[]> {
        let url_ = this.baseUrl + "/api/LogFileItems";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileItemsAll(_response);
        });
    }

    protected processLogFileItemsAll(response: Response): Promise<LogFileItem[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogFileItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileItem[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    logFileItemsPOST(body: LogFileItemInputOutput[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/LogFileItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileItemsPOST(_response);
        });
    }

    protected processLogFileItemsPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    logFileItemsDELETE(): Promise<void> {
        let url_ = this.baseUrl + "/api/LogFileItems";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileItemsDELETE(_response);
        });
    }

    protected processLogFileItemsDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param caseParam (optional) 
     * @param userParam (optional) 
     * @param actorParam (optional) 
     * @param typeParam (optional) 
     * @param startDateParam (optional) 
     * @param endDateParam (optional) 
     * @return OK
     */
    searchAll(caseParam: string | undefined, userParam: string | undefined, actorParam: string | undefined, typeParam: string | undefined, startDateParam: Date | undefined, endDateParam: Date | undefined): Promise<LogFileItemInputOutputActor[]> {
        let url_ = this.baseUrl + "/api/LogFileItems/search?";
        if (caseParam === null)
            throw new Error("The parameter 'caseParam' cannot be null.");
        else if (caseParam !== undefined)
            url_ += "caseParam=" + encodeURIComponent("" + caseParam) + "&";
        if (userParam === null)
            throw new Error("The parameter 'userParam' cannot be null.");
        else if (userParam !== undefined)
            url_ += "userParam=" + encodeURIComponent("" + userParam) + "&";
        if (actorParam === null)
            throw new Error("The parameter 'actorParam' cannot be null.");
        else if (actorParam !== undefined)
            url_ += "actorParam=" + encodeURIComponent("" + actorParam) + "&";
        if (typeParam === null)
            throw new Error("The parameter 'typeParam' cannot be null.");
        else if (typeParam !== undefined)
            url_ += "typeParam=" + encodeURIComponent("" + typeParam) + "&";
        if (startDateParam === null)
            throw new Error("The parameter 'startDateParam' cannot be null.");
        else if (startDateParam !== undefined)
            url_ += "startDateParam=" + encodeURIComponent(startDateParam ? "" + startDateParam.toISOString() : "") + "&";
        if (endDateParam === null)
            throw new Error("The parameter 'endDateParam' cannot be null.");
        else if (endDateParam !== undefined)
            url_ += "endDateParam=" + encodeURIComponent(endDateParam ? "" + endDateParam.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchAll(_response);
        });
    }

    protected processSearchAll(response: Response): Promise<LogFileItemInputOutputActor[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogFileItemInputOutputActor.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileItemInputOutputActor[]>(null as any);
    }

    /**
     * @return OK
     */
    logFileTitlesAll(): Promise<LogFileTitle[]> {
        let url_ = this.baseUrl + "/api/LogFileTitles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileTitlesAll(_response);
        });
    }

    protected processLogFileTitlesAll(response: Response): Promise<LogFileTitle[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogFileTitle.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileTitle[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    logFileTitlesPOST(body: LogFileTitle | undefined): Promise<LogFileTitle> {
        let url_ = this.baseUrl + "/api/LogFileTitles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileTitlesPOST(_response);
        });
    }

    protected processLogFileTitlesPOST(response: Response): Promise<LogFileTitle> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LogFileTitle.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileTitle>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    logFileTitlesPUT(body: LogFileTitle | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/LogFileTitles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileTitlesPUT(_response);
        });
    }

    protected processLogFileTitlesPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    logFileTitlesDELETE(): Promise<void> {
        let url_ = this.baseUrl + "/api/LogFileTitles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileTitlesDELETE(_response);
        });
    }

    protected processLogFileTitlesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param titleParam (optional) 
     * @return OK
     */
    search(titleParam: string | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/LogFileTitles/search?";
        if (titleParam === null)
            throw new Error("The parameter 'titleParam' cannot be null.");
        else if (titleParam !== undefined)
            url_ += "titleParam=" + encodeURIComponent("" + titleParam) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    logFileTitlesGET(id: number): Promise<LogFileTitle> {
        let url_ = this.baseUrl + "/api/LogFileTitles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogFileTitlesGET(_response);
        });
    }

    protected processLogFileTitlesGET(response: Response): Promise<LogFileTitle> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LogFileTitle.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileTitle>(null as any);
    }

    /**
     * @param titleParam (optional) 
     * @return OK
     */
    rows(titleParam: string | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/LogFileTitles/rows?";
        if (titleParam === null)
            throw new Error("The parameter 'titleParam' cannot be null.");
        else if (titleParam !== undefined)
            url_ += "titleParam=" + encodeURIComponent("" + titleParam) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRows(_response);
        });
    }

    protected processRows(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }
}

export class LogFileItem implements ILogFileItem {
    id?: number;
    timestamp!: Date;
    case!: string | undefined;
    type!: string | undefined;
    endpoint!: string | undefined;
    user_ID?: number | undefined;

    constructor(data?: ILogFileItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            this.case = _data["case"];
            this.type = _data["type"];
            this.endpoint = _data["endpoint"];
            this.user_ID = _data["user_ID"];
        }
    }

    static fromJS(data: any): LogFileItem {
        data = typeof data === 'object' ? data : {};
        let result = new LogFileItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["case"] = this.case;
        data["type"] = this.type;
        data["endpoint"] = this.endpoint;
        data["user_ID"] = this.user_ID;
        return data;
    }
}

export interface ILogFileItem {
    id?: number;
    timestamp: Date;
    case: string | undefined;
    type: string | undefined;
    endpoint: string | undefined;
    user_ID?: number | undefined;
}

export class LogFileItemInputOutput implements ILogFileItemInputOutput {
    timestamp?: Date;
    case?: string | undefined;
    userName?: string | undefined;
    type?: string | undefined;
    endpoint?: string | undefined;

    constructor(data?: ILogFileItemInputOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()).toLocaleString() : <any>undefined;
            this.case = _data["case"];
            this.userName = _data["userName"];
            this.type = _data["type"];
            this.endpoint = _data["endpoint"];
        }
    }

    static fromJS(data: any): LogFileItemInputOutput {
        data = typeof data === 'object' ? data : {};
        let result = new LogFileItemInputOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["case"] = this.case;
        data["userName"] = this.userName;
        data["type"] = this.type;
        data["endpoint"] = this.endpoint;
        return data;
    }
}

export interface ILogFileItemInputOutput {
    timestamp?: Date;
    case?: string | undefined;
    userName?: string | undefined;
    type?: string | undefined;
    endpoint?: string | undefined;
}

export class LogFileItemInputOutputActor implements ILogFileItemInputOutputActor {
    timestamp?: Date;
    case?: string | undefined;
    userName?: string | undefined;
    actor?: string | undefined;
    type?: string | undefined;
    endpoint?: string | undefined;

    constructor(data?: ILogFileItemInputOutputActor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()).toLocaleString() : <any>undefined;
            this.case = _data["case"];
            this.userName = _data["userName"];
            this.actor = _data["actor"];
            this.type = _data["type"];
            this.endpoint = _data["endpoint"];
        }
    }

    static fromJS(data: any): LogFileItemInputOutputActor {
        data = typeof data === 'object' ? data : {};
        let result = new LogFileItemInputOutputActor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["case"] = this.case;
        data["userName"] = this.userName;
        data["actor"] = this.actor;
        data["type"] = this.type;
        data["endpoint"] = this.endpoint;
        return data;
    }
}

export interface ILogFileItemInputOutputActor {
    timestamp?: Date;
    case?: string | undefined;
    userName?: string | undefined;
    actor?: string | undefined;
    type?: string | undefined;
    endpoint?: string | undefined;
}

export class LogFileTitle implements ILogFileTitle {
    id?: number;
    title!: string | undefined;
    numOfRows!: number;

    constructor(data?: ILogFileTitle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.numOfRows = _data["numOfRows"];
        }
    }

    static fromJS(data: any): LogFileTitle {
        data = typeof data === 'object' ? data : {};
        let result = new LogFileTitle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["numOfRows"] = this.numOfRows;
        return data;
    }
}

export interface ILogFileTitle {
    id?: number;
    title: string | undefined;
    numOfRows: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}